
show tables;
show tables;

create table student(
sid int,
sname varchar(20),
sage int,
birthday date,
remark varchar(20)
);

desc table student
desc table student

drop table student
drop table student

alter table student rename to teacher;
alter table student rename to teacher;

alter table student add column sgender varchar(2);
alter table student add column sgender varchar(2);

alter table student drop column sgender;
alter table student drop column sgender;

alter table student modify column remark varchar(100);
alter table student modify column remark varchar(100);

alter table student change column sgender gender varchar(2);
alter table student change column sgender gender varchar(2);

desc table student;
desc table student;

DDL Data Definition Language:create/drop/alter
DML :insert/delete/update/truncate
DCL : grant,remove
DQL : select,show

mysql -u root -p 
mysql -u root -p

show databases;
show databases;

create database day15;
create database day15;

create database day15 default character set utf8;
create database day15 default character set utf8;
create database day15 default character set utf8;

drop database day15;
drop database day15;

show create database day15;
show create database day15;

alter database day15 default character set gbk;
alter database day15 default character set gbk;

use day15;
use day15;

insert into student values(1,'feiyue','nan',22);
insert into student values(1,'feiyue','nan',22);

select * from student
select * from student

insert into student(id,name) values(2,'xiaobao');
insert into student(id,name) values(2,'xiaobao');

update student set gender = 'nv';
update student set gender='nv';
update student set gender='nv';

update student set gender='nan' where id=1;
update student set gender='nan' where id=1;

update student set gender='nan',age=23 where id=1;
update student set gender='nan',age=23 where id=1;

delete from student;truncate table student;
delete from student;truncate table student;

delete from student where id=1;
delete from student where id=1;

select * from student;
select * from student;

select id,name from student;
select id,name from student;

select id as '编号',name as '姓名 from student
select id as '',name as '' from student

select id,name,gender,age,'java就业班' as '年级' from student;
select id,name,gender,age,'java就业班' as '年级' from student

alter table student 
add column servlet int,
add column jsp int;
update student set servlet=70,jsp=85 where id=1;
update student set servlet=70,jsp=85 where id=1;

update student set servlet=5,jsp=90 where id=2;
update student set servlet=5,jsp=90 where id=2;

select id,name,(servlet+jsp) as '总成绩' from student;
select id,name,(servlet+jsp) as '总成绩' from student;

select distinct gender from student;
select distinct gender from student;
select distinct(gender) from student;
select distinct(gender) from student;

select * from student where id=2 and name='';
select * from student where id=2 and
name='';

select * from student where servlet>70;
select * from student where servlet>70 and servlet <=90;

select * from student where servlet between 75 and 90;

select * from student where gdnder<>'nan';
select * from student where gender<>'nan';

select * from student where address is null or address='';
select * from student where address is null or address='';

select * from student where address is not null and address<>'';
select * from student where address is not null and address<>'';

select * from student where name like '张%';
select * from student where name like '张%';

select id,name from student where name like '李_';
select id,name from student where name like '李_';

select sum(servlet) as 'servlet总成绩' from student;
select sum(servlet) as 'servlet总成绩' from student;
select avg(servlet) as 'servlet平均分' from student;
select max(servlet) as 'servlet最高分' from student;
select min(serlvet) as 'servlet最低分' from student;

select count(id) from student;
select count(id) from student;

select count(*) from student;
select count(*) from student;

-- 分页查询
select * from student limit 0,2;
select * from student limit 2,2;
select * from student limit (当前页-1)*每页显示的条数,每页显示的条数;
select * from student limit (当前页-1)*每页显示的条数,每页显示的条数;

select * from student order by id asc;
select * from student order by id asc;
select * from student order by servlet asc,jsp desc;
select * from student order by servlet asc,jsp desc;

select gender,count(*) from student group by gender;
select gender,count(*) from student group by gender;

select gender,count(*) from student group by gender having count(*)>2;
select gender,count(*) from student group by gender having count(*)>2;

-- 约束
create table student(
	address varchar(20) default ''
);

address varchar(20) not null default '',
id int unique,
id int unique,

id int primary key,
id int primary key,
id int primary key auto_increment,
id int primary key auto_increment,

id int(4) zerofill primary key auto_increment,
id int(4) zerofill primary key auto_increment,

create table dept(
	id int primary key,
	deptName varchar(20)
);
create table employ(
	empId int primary key,
	empName varchar(20),
	deptId int,
	constraint employee_dept_fk foreign key(deptId) preferences dept(id)
);

constraint employee_dept_fk foreign key(deptId) preferences dept(id)
constraint employee_dept_fk foreign key(deptId) preferences dept(id)
constraint employee_dept_fk foreign key(deptId) preferences dept(id)

constraint employee_dept_fk foreign key(deptId) preferences dept(id) on update cascade on delete cascade,

on update cascade ,on delete cascade

工程表: 工程ID,工程号,工程名称
职工表: 职工ID,职工号,职工姓名,职务ID,
职务表: 职务ID,职务号,职位名称,职位薪水,
工程职工表(中间表:多对多关系): 职工ID,工程ID,工时

mysql -u root -p day15 > e:/day15.sql
mysql -u root -p day15 > e:/day15.sql

mysql -u root -p day15 < e:/day15.sql
mysql -u root -p day15 < e:/day15.sql

grant select on day15.employee to 'feiyue'@'localhost' indentified by '12345';
grant all on day15.employee to 'feiyue'@'localhost' identified by '12345';
grant select update delete on day15 to 'feiyue'@'localhost' indentified by '12345';

select password('root'); -- 显示root的md5加密后的
use mysql;
select * from user;
update user set password=password('123456') where user='root';

select password('root');
use mysql;
select * from user;
update user set password=password('123456') where user='root';

create trigger tri_empAdd after delete on employee for each row insert into test_log(content) valuse('员式表删除了一条记录')

create trigger tir_empAdd after delete on employee
for each row insert into test_log() values();
create trigger tri_empAdd after delete on employee for each row insert into test_log() values();

show variables;
show variables;
show variables like 'character_%';
show variables like 'character_%';

select @@character_set_client;
select @@character_set_client;
set character_set_client = gbk;
set character_set_client = gbk;

set @name='feiyue';
select @name;

set @name='feiyue';
select @name;

set @name='feiyue';
select @name;

-- 存储过程
delimiter $
create procedure pro_test()
begin 
	select * from employee
end $

call pro_test()

delimiter $
create procedure pro_test()
begin
	select * from employee
end $ 

call pro_test()

delimiter $ 
create procedure pro_findById(IN eid int)
begin
	select * from employee where id = eid;
end $

call pro_findById(2)

delimiter $
create procedure pro_findById(IN eid int)
begin 
	select * from employee where id=eid;
end $

call pro_findById(2)

delimiter $
create procedure pro_testOut(OUT str varchar(20))
begin 
	set str='hello,sql';
end $

call pro_testOut(@name);

delimiter $
create procedure pro_testOut(OUT str varchar(20))
begin
	set str='hello,sql';
end $

call pro_testOut(@name) -- 此时name为会话变量

delimiter $
create procedure pro_testInOut(INOUT n int)
begin
	-- 此方法中的n为局部变量
	select n;
	set n=500;
end $

-- 设为会话变量
set @n=10
call pro_testInOut(n)

delimiter $
create procedure pro_testInOut(INOUT n int)
begin 
	select n;
	set n=500;
end $

set @n=5;
call pro_testInOut(n)

delimiter $
create procedure pro_testIf(IN num int,OUT str varchar(20)
begin
	if num=1 then
		set str='星期一'
	elseif num=2 then
		set str='星期二'
	elseif num=3 then
		set str='星期三'
	else
		set str='输入错误'
	end if
end $

call pro_testIf(1,@str);
select @str;

delimiter $
create procedure pro_testWhile(IN num int,OUT result int)
begin 
	declare i int default 1;
	declare vsum int default 0;
	while i<=num do
		set vsum = vsum + i;
		set i = i + 1;
	end while;
	set result = vsum;
end $

call pro_testWhile(100,@result)
select @result;

delimiter $
create procedure pro_findNameById(IN eid int,OUT vname varchar(20))
begin
	select empName into vname from employee where id=eid;
end $

call pro_findNameById(1,@name)
select @name;


delimiter $
create procedure pro_findNameById(IN eid int,OUT vname varchar(20))
begin
	select empName into vname from employee where id=eid;
end $

call pro_findNameById(1,@name)
select @name;

delimiter $
create procedure pro_testAvg(OUT str varchar(20))
begin
	declare savg double;
	select avg(englishScore) into savg from student;
	if savg <=70 then
		set str='一般';
	elseif savg>70 and savg<=90 then
		set str='良好';
	else
		set str='优秀';
	end if;
end $

call pro_testAvg(@str);
select @str;

delimiter $
create procedure pro_testAvg(OUT str varchar(20))
begin
	declare savg double;
	select avg(englishScore) into savg from student;
	if savg<=70 then
		set str='一般';
	elseif savg>70 and savg<=90 then
		set str='良好';
	else 
		set str='优秀';
	end if
end $

call pro_testAvg(@str);
select @str;

-- 多表查询
select empName,deptName from employee,dept;
select empName,deptName from employee,dept;

select empName,deptName
	from employee,dept
	where employee.deptId = dept.id
select empName,deptName
	from employee
	inner join dept
	on employee.deptId=dept.id
select e.empName,d.deptName
	from employee as e
	inner join dept as d
	on e.deptId=d.id

select empName,deptName
	from employee,dept
	where employee.deptId=dept.id
select empName,deptName
	from employee
	inner join dept
	on employee.deptId=dept.id
select e.empName,d.deptName
	from employee as e
	inner join dept as d
	on e.deptId = d.id

select d.deptName,e.empName
	from dept as d
	left outer join employee as e
	on d.id=e.deptId
select d.depName,e.empName
	from dept d
	left outer join employee e
	on e.id=e.deptId
select d.deptName,e.empName
	from employee e
	right outer join dept d
	on e.deptId=d.id
select d.deptName,e.empName
	from employee e
	right outer join dept d
	on e.deptId = d.id

select empl.empName,boss.empName
	from employee empl
	left outer join employee boss
	on empl.bossId=boss.id
select empl.empName,boss.empName
	from employee empl
	left outer join employee boss
	on empl.bossId=boss.id

constraint employee_dept_fk foreign key(deptId) preferences dept(id) on update cascade on delete cascade;
constraint employee_dept_fk foreign key(deptId)
preferences dept(id) on update cascade on delete cascade;

delete from student where id=1;
delete from studetn where id=1;
truncate from student where id=1;
truncate from student where id=1;

create trigger tri_empAdd after insert on employee for each row insert into test_log(content) values();
create trigger tri_empAdd after insert on employee for each row insert into test_log() vlues();

	


