注意: sql 中不区分大小写

sql语句:
  DDL:数据定义语言 Data Definition Language
    create/drop/alter;
  DML:数据操作语言 Data Manipulation Language
    insert/delete/update/truncate
  DCL:数据控制语言
    grant,remove
  DQL:数据查询语言
    select/show

0)注释
-- 注释内容

用户管理:

1)以root用户登录mysql数据库: 
   mysql -u root -p 回车
   Enter password:

数据库管理:

2)查看当前所有数据库(database)
  show databases;

3)创建数据库
  create databases day15;

4)创建数据库(指定默认字符集)
  create database day15
->default character set utf8;

5)删除数据库
  drop database day15;

6)查询某一数据库的默认字符集
  show create database day15;

7)修改某一数据库的字符集
  alter database day15 default character set gbk;

8)进入/选择某一数据库
  use day15;

9)查看当前所用的数据库,3种方式
  方式1: select database();
  方式2: 用show tables语句，查询出来的结果中，第一行为Tables_in_XXX
  方式3: status;




表管理:

9)查看所有表(前提:进入某一数据库)
  show tables;
 
10)创建表
  create table student(
->sid int ,
->sname varchar(20),
->sage int,
->birthday date,
->remark varchar(20)
->);

11)查看某个表的结构
  desc student;

12)删除某个表
  drop table student;

13)修改表名(将student表改名为teacher,to可省略)
  alter table student rename to teacher;






字段/列管理:(全都是alter)

14)为某个表增加一个字段(为student表增加一个sgender性别字段)
  alter table student
->add column sgender varchar(2);

15)为某个表删除一个字段(为student表删除sgender字段,column可省略)
  alter table student
->drop column sgender;
  
16)修改一个表字段的属性(修改student表remark字段的类型长度,column可省略),记17的话则不用记此条
  alter table student
->modify column remark varchar(100);

17)重命名某字段/修改某字段的结构(将student表sgender字段的名字改为gender,column可省略)
  alter table student
->change column sgender gender varchar(2);


练习题:

数据库:
1.进入mysql
2.查看所有的数据库
3.创建数据库localtest半将编码设为gbk
4.查看locatest的结构,编码等
5.将localtest的编码改为utf8,并查看是否修改成功
6.使用localtest数据库
7.查看当前使用的数据库是否为localtest
表:
1.查看当前数据库的所有表.
2.创建一个表user,字段有u_id和name
3.查看表user的结构
4.将表usr的重命名为username
字段:
1.在表username中重新添加两个字段u_age与u_test
2.将表username中的字段name重命名为u_name
3.将表username中的字段u_id添加主键约束primary key
4.删除表username中的字段u_test
记录:
1.往表username中添加三行数据 (1,'zhangsan',20),(2,'王五',22),(3,'zhao@163.com',23)
2.查询所



记录管理:(insert,update,delete,truncate)

18)增加记录(往student(id,name,gender,age)表中插入一条记录)
  insert into student values(1,'张三','男',20);

19)查询记录(查询所有记录)
  select * from student;

20)增加记录(往student表中插入部分字段的记录)
  insert into student(id,name) values(2,'李四');

21)修改记录(将所有记录的某个字段进行修改)
  update student set gender='女';

22)修改记录(将某个记录的某个字段进行修改)
  update student set gender='男' where id=1;

23)修改记录(将某个记录的多个字段进行修改)
  update student set gender='女',age=30 where id=2;

24)删除所有记录(删除student表的所有记录)
  delete from student;(后面可以带条件,但只能删除数据,不能删除表的约束)
  或
  truncate table student;(后面不可以带条件,能删除表的数据和约束)

25)删除某条记录
  delete from student where id=2;



查询语句

26)查询所有列(查询student表的所有列)
  select * from student;

27)查询指定列(student表的1个或多个列)
  select id,name,gender from student;

28)查询时指定字段的别名
  select id as '编号',name as '姓名' from student;

29)查询时添加常量列(查出student表的所有数据并加一个'java就业班'常量列)
  select id,name,gender,age,'java就业班' as '年级' from student;

30)查询时合并列(只能合并数值类型的)
  -- 给student表添加servlet和jsp成绩列
  alter table student
->add column servlet int,
->add column jsp int;
  --为两列增加数据
  update student set servlet=70,jsp=85 where id=1;
  update student set servlet=5,jsp=90 where id=2;
  -- 查询学生的servlet和jsp总成绩
  select id,name,(servlet+jsp) as '总成绩' from student;

31)查询某个字段的不重复记录(去除重复记录)
  select distinct gender from student;
  或
  select distinct(gender) from student;

32)条件查询(where)
  -- 逻辑条件 and or
  select * from student where id=2 and name='李四';
  select * from student where id=3 or name='张三';

  -- 比较条件 > < >= <= == <>(不等于) between and
  select * from student where servlet > 70;
  select * from student where serlvet >= 75 and servlet <=90;
  等价于
  select * from student where servlet between 75 and 90;
  -- 查询gender不为'男'的记录
  select * from student where gender<>'男';

  -- 判空条件(null 空字符串): is null/is not null/ =''/<>''
  -- 查询address为空的记录
  select * from student where address is null; -- 判断null
  select * from student where address=''; -- 判断空字符串
  -- 查询address为空的记录
  select * from student where address is null or address='';
  --查询有地址的学生
  select * from studetn where address is not null and address<>'';

  -- 模糊条件(like),%表示任意N个字符,_表示任意1个字符
  -- 查询姓'张'的学生
  select * from student where name like '张%';
  --查询姓'李'且只有两个字的学生
  select * from student where name like '李_';


33)聚合查询(使用聚合函数的查询)
  -- 常用聚合函数: sum(),avg(),max(),min(),count()
  -- 查询学生的servlet总成绩(sum)
  select sum(servlet) as 'servlet的总成绩' from student;
  select avg(servlet) as 'servlet的平均分' from student;
  select max(servlet) as 'servlet的最高分' from student;
  select min(servlet) as 'servlet的最低分' from student;
  -- 统计当前有多少学生(count()不包括null的数据)
  select count(id) from student;
  select count(*) from student; -- 统计每个字段的数量,取其最大值

34)分页查询(limit 起始行,查询的行数)-->起始行从0开始
  -- 查询出前两条记录(第1,第2条记录)
  select * from student limit 0,2;
  -- 查询出第3,第4条记录(如果没有记录就不显示)
  select * from student limit 2,2;
  -- 分页查询当前页的数据的sql:
  -- select * from student limit (当前页-1)*每页显示的条数,每页显示的条数;

35)查询排序(默认情况下按插入记录顺序排序,默认正序asc)
  -- order by asc/desc 正序/反序 递增/递减 a-z/z-a
  select * from student order by id asc;
  -- 多个排序条件,先按照servlet正序,再按照jsp的倒序
  servlet * from student order by servlet asc,jsp desc;

36)分组查询(group by)
   -- 查询男女的各自的人数
   -- 1)把学生按照性别来进行分组(group by)
   -- 2)统计每组的人数(count(*))
   select gender,count(*) from student group by gender;
  
37)分组查询后筛选
  -- 查询总人数大于2的性别
  -- 1)查询每个性别的人数
  -- 2)筛选出人数大于2的记录(groupby之前能用where,之后不能用where,用having)
  select gender,count(*) from student group by gender having count(*)>2;


数据约束,字段约束:默认值/非空/唯一/主键/自增长/外键

38)字段默认值
create table student(
	address varchar(20) default '武汉'
);

39)非空约束(字段值不能为null或为空)
  address varchar(20) not null;

40)唯一约束(为null或不填时无作用,只是在有值时才起作用)
  id int unique,

41)主键约束(非空约束且唯一约束)
  id int primary key,

42)自增约束(自增长字段可以不赋值,自动递增,从0开始,不包括0)
  id int primary key auto_increment,
  -- 设置int为4位,zerofill为不满足位数时用0填充(0001)
  id int(4) zerofill primary key auto_increment
  -- delete删除数据不能影响自增长
  delete from student
  -- truncate删除数据可以影响自增长(truncate:缩短,截断)
  truncate from student where id = 1

43)外键约束
  -- (约束别人的表/主表)
  create table dept(
	id int primary key,
	deptName varchar(20) -- 部门名称
  );
  -- (被约束的表/从表/副表)
  create table employee(
	empId int primary key,
	empName varchar(20),
	deptId int,   	-- 把部门名称改为部门ID
	-- 声明一个外键约束 constraint 外键名称 foreign key(本表外键) preferences 参考表(参考字段)
	constraint employee_dept_fk foreign key(deptId) preferences dept(id)
  );
  -- 外键约束注意事项: 
  -- 1.外键一定是设置在副表中
  -- 2.主表的参考字段通常为主键
  -- 3.添加新的数据时,先添加主表的数据,再添加副表的数据
  -- 4.修改现有的数据时,先修改副表的数据,再修改主表的数据(不使用级联操作时)
  -- 5.删除现有的数据时,先删除副表的数据,再删除主表的数据(不使用级联操作时)

44)级联操作(级联修改:on update cascade级联删除: on delete cascade)
  -- 有外键约束时才能用级联操作,即删除或修改主表时可以直接也对副表起作用(constraint:约束,cascade:级联,串联)
  constraint employee_dept_fk foreign key(deptId) preferences dept(id) on update cascade on delete cascade,
  -- 修改主表时,副表也会自动影响
  update dept set id=4 where id=3;
  -- 删除主表时,副表的对应数据也会自动删除
  delete from dept where id=4;

---------------------第二部分(多表查询/关联查询)------------

45)交叉连接查询(产生笛卡尔乘积现象,产生数据数=表1记录数*表2记录数,不推荐,一般结果都不是我们要的)
   select empName,deptName from employee,dept   

46)内连接(只有满足条件的结果才会显示)
   --查询员工及其所在部门
   select empName,deptName 
	from employee,dept 
	where employee.deptId = dept.id
   -- 或者如下查询
   select empName,deptName 
	from employee 
	inner join dept 
	on employee.deptId=dept.id
  -- 使用别名(as可以不写)
  select e.empName,d.deptName
	from employee as e
	inner join dept as d
	on e.deptId=d.id
47)左外连接查询:使用左边表的数据去匹配右边表的数据,如果符合连接条件的结果则显示,如果不符合连接条件则显示null
  -- 需求:查询每个部门的员工
  -- 内连接:有问题,(有的部门没有员工,这种情况用内连接不会显示)
  select d.deptName,e.empName
	from dept d
	inner join employee e
	on d.id=e.deptId
  -- 左外连接:左边的数据一定会完全显示(outer可以省略)
  select d.deptName,e.empName
	from dept d
	left outer join employee e
	on d.id=e.deptId

48)右外连接查询/右连接 使用右边表的数据去匹配左边表的数据,如果符合连接条件的结果则显示,如果不符合连接条件则显示null
  -- 右表连接:右表的数据一定会完全显示
  -- 需求同上:但使用右外连接
  select d.deptName,e.empName
	from employee e
	right outer join dept d
	on e.deptId=d.id

49)自连接查询
  -- employee表中添加上司属性
  alter table employee add bossId int;
  update employee set bossId=1 where id=2;
  update employee set bossId=2 where id=3;
  update employee set bossId=3 where id=4;
  -- 需求:查询员工及其上司(员工和上司都是employee表中的)
  select empl.empName,boss.empName
	from employee empl 
	left outer join employee boss
	on empl.bossId=boss.id


-----------------第三部分:mysql存储过程(带有逻辑的sql语句)-----------
50)存储过程(在数据库的服务器端执行的.)

  -- 创建存储过程
  -- 声明结束符  
  delimiter $    -- delimiter 分隔符
  create procedure pro_test()   -- procedure过程
  begin
	--可以写多个sql语句
	select * from employee;
  end $

  -- 执行存储过程
  call pro_test();

  -- 带有输入参数IN的存储过程
  delimiter $
  create procedure pro_findById(in eid int)  -- IN表示输入参数
  begin
  	select * from employee where id=eid;
  end $
  
  -- 调用
  call pro_findById(2)

  -- 带有输出参数OUT的存储过程
  delimiter $
  create procedure pro_testOut(out str varchar(20))  -- OUT:输出参数
  begin
  	set str='hello,sql';
  end $
  -- 调用,使用name会话变量接收返回参数的值
  calss pro_testOut(@name);
  -- 查看变量值
  select @name

)删除存储过程
 drop procedure pro_testOut

)带有输入输出INOUT参数的存储过程
  delimiter $
  create procedure pro_testInOut(INOUT n int)
  begin
	-- 查看变量(变为局部变量)
	select n;
	set n=500;
  end $

  -- 调用
  set @n=10
  call pro_testInOut(n)

  -- 带有条件判断的存储过程
  delimiter $
  create procedure pro_testIf(IN num int,OUT str varchar(20))
  begin
	if num=1 then
		set str='星期一'
	elseif num=2 then
		set str='星期二'
	elseif num=3 then
		set str='星期三'
	else
		set str='输入错误'
	end if
  end $
  
  call pro_testIf(1,@str)

  -- 带有循环功能的存储过程
  -- 需求: 输入一个整数,求和.例:输入100,统计1-100的和
  delimiter $
  create procedure pro_testWhile(IN num int,OUT result int)
  begin
	-- 定义一个局部变量,
	declare i int default 1;
	declare vsum int default 0;
	while i<=num do
		set vsum = vsum + i;
		set i = i + 1;
	end while;
	set result=vsum;
  end $
  
  call pro_testWhile(100,@result);
  select @result;

  -- 使用查询的结果作为返回值(into语法)
  delimiter $
  create procedure pro_findNameById(IN eid int,OUT vname varchar(20))
  begin
  	select empName into vname from  employee where id=eid
  end $

  call pro_findNameById(1,@name);

  select @name;  
 
  -- 练习:编写一个存储过程
	如果学生的英语平均分小于等于70分,则输出'一般'
	如果学生的英语平均分大于70分且小于等于90分,则输出'良好'
	如果学生的英语平均分大于90分,则输出'优秀'

 delimiter $
 create procedure pro_testAvg(OUT str varchar(20))
 begin
	-- 定义局部变量
	declare savg double;
	select avg(englishScore) into savg from student;
	if savg<=70 then 
		set str='一般';
	elseif savg>70 and savg<=90 then
		set str='良好';
	else
		set str='优秀';
	end if;
 end $
 
 call pro_testAvg(@str);
 select @str;


51)查看mysql所有的全局变量(内置变量)
  show variables;
  -- 查看以character_开头的全局变量  
  show variables like 'character_%';

52)查看某一全局变量的值(查看character_set_client的值)
  select @@character_set_client;

53)修改mysql内置变量的值(character_set_client设为gbk,默认为utf8)
  set character_set_client=gbk;
  set character_set_results=gbk;

54)会话变量:只存在于当前客户端与服务器端的一次连接当中,如果连接断开,那么会话变量会全部丢失
  -- 定义会话变量: set @变量=值
  set @name='feiyue'
  -- 查看会话变量
  select @name

55)局部变量:在存储过程中使用的就是就叫做局部变量,只要存储过程执行完毕,局部变量就丢失.
  -- 变量范围大小: 全局变量>会话变量>局部变量

---------------------------触发器------------------
56)触发器
  --需求: 当向员工表插入一条记录时,希望mysql自动同时往日志表插入数据 
  -- 创建插入触发器(插入一条记录时触发一些事情发生,trigger:触发器)
  create trigger tri_empAdd after insert on employee for each row insert into test_log(content) values('员工表插入了一条记录');

  insert into employee(id,empName,deptId) values(7,'飞月',1);

  -- 创建修改触发器
  create trigger tri_empAdd after update on employee for each row insert into test_log(content) values('员工表修改了一条记录');
  
  -- 创建删除触发器
  create trigger tri_empAdd after delete on employee for each row insert into test_log(content) values('员工表删除了一条记录');

57)修改mysql的用户密码(password函数:md5加密,为单向加密)
  -- 显示root的密码(md5加密后的)
  select password('root');-- *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B

  use mysql;
  select * from user;
  update user set PASSWORD=PASSWORD('123456') where USER='root'

58)分配权限账户
  grant select on day15.employee to 'feiyue' @'localhost' indentified by '12345';
  grant update delete on day15.employee to 'feiyue' @'localhost' indentified by '12345';
  grant all on day15.employee to 'feiyue'
@'localhost' indentified by '12345';



59)mysql备份和恢复
  -- 在cmd模式下,不是mysql模式下
  -- 将day16数据库备份到e:/day16.sql
  mysqldump -u root -p day16 > e:/day16.sql

  -- 在cmd模式下恢复,不是mysql模式下
  -- 将day16恢复(数据库中要有空的数据库才能恢复)
  -- create database day16;
  mysql -u root -p  day16 < e:/day16.sql;
  



--练习
delete from student;
truncate table student;
create database student default character utf8;
drop database student;
alter database student default character gbk;
show databases/show create database student;

use student;
drop table student;
create table student(
  int id,
  name varchar(20)
);
alter table student add column id int;
alter table student add column name varchar(20);
alter table student drop column id;
alter table student modify column id varchar(20);
alter table studetn change column id sid varchar(20);
alter table student rename to t_student;
show tables / desc student;

insert into student(id,name) values(1,'');
delete from student where ..;
update student set id=2,name='' where id=1;

select * from student;
select id from student;
select id as '编号' from student;
select chinese+engligh from student;
select distinct(chinese) from student;
select * from student where .. and/or ..;
select * from student where chinese >= 60;
select * from student where id is null/is not null;
select * from student where id =''/id<>'';
select * from student where name like '李%'/'李_ _';
select * from student limit (0,2);
select * from student order by id asc;
select * from student group by gender;
select * from student group by gender having name='李_';
